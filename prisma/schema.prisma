// Prisma schema for PostgreSQL auth + cart + orders

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  name      String?
  email     String   @unique
  password  String   // bcrypt hash
  image     String?
  emailVerified DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  cart   Cart?
  orders Order[]
  addresses Address[]

  // NextAuth (optional, for future OAuth support)
  accounts Account[]
  sessions Session[]
}

model Cart {
  id        String     @id @default(cuid())
  userId    String     @unique
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  items     CartItem[]
}

model CartItem {
  id        String   @id @default(cuid())
  cartId    String
  productId String   // Sanity _id
  title     String
  price     Decimal  @db.Decimal(10,2)
  image     String?
  quantity  Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  cart      Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)

  @@index([cartId])
  @@index([productId])
}

model Order {
  id         String      @id @default(cuid())
  userId     String
  status     String      @default("PENDING")
  subtotal   Decimal     @db.Decimal(10,2)
  shipping   Decimal     @db.Decimal(10,2) @default(0)
  tax        Decimal     @db.Decimal(10,2) @default(0)
  total      Decimal     @db.Decimal(10,2)
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  items      OrderItem[]
}

model OrderItem {
  id        String   @id @default(cuid())
  orderId   String
  productId String   // Sanity _id snapshot
  title     String
  price     Decimal  @db.Decimal(10,2)
  image     String?
  quantity  Int      @default(1)
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@index([orderId])
}

model Address {
  id        String   @id @default(cuid())
  userId    String
  type      AddressType
  fullName  String
  line1     String
  line2     String?
  city      String
  state     String?
  postal    String?
  country   String
  phone     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum AddressType {
  SHIPPING
  BILLING
}

// NextAuth models (optional but included for future OAuth + DB sessions)
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}


